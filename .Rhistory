g<-ggplot(ToothGrowth, aes(y=len, x=dose, color=supp))
g<-g+geom_point()+geom_smooth()
g<-g+labs(y="Length of Growth",x="Dosage",title="Length of Odontoblasts Growth at different dosage of Vit C")
g<-g+scale_color_discrete(name="Delivery Methods",breaks=c("OJ","VC"),labels=c("Orange Juice","Ascorbic Acid"))
g
setseed(5678)
set.seed(55555)
mean(med)
swirl()
library(swirl)
swirl()
rgp1()
rgp2
rgp2()
head(swiss_
)
head(swiss)
lm(Fertility~Agriculture+Examination+Educatin+Catholic+Infant.Mortality,data=swiss)
lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality,data=swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdls)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean(
apply(x1c,1,mean)
)
apply(x1c,1,mean)
fit1<-Fertility(Fertility~Agriculture,swiss)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
sahpiro.test(fit3$residuals)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View (ravenData)
glm(ravenWinNum~ravenScore,family=binomial,data = ravenData)
mdl<-glm(ravenWinNum~ravenScore,family=binomial,data = ravenData)
predict(mdl,data.frame(ravenScore=c(0,3,6)))
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
head(hits)
head(hits[,'date'])
class(hits[,'date'])
as.integer(class(hits[,'date']))
as.integer(class(hits[,'date'])))
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson, hits)
summary(mdl)
confint(mdl,'date')
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-glm(visits~date,data = hits,offset = log(visits+1),family = poisson)
mdl2<-glm(simplystats~date,data = hits,offset = log(visits+1),family = poisson)
qpois(0.95, mdl2$fitted.values[704])
data(Seatbelts)
class(Seatbelts)
Seatbelts<-as.data.frame(Seatbelts)
GLM(DriversKilled~kms+PetrolPrice+law, family=Poisson, data=Seatbelts)
glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts)
summary(fit)
exp(confint(fit))
exp(-1.149e-0)
exp(-1.149e-01)
exp(1.149e-01)
fit<-lm(log(DriversKilled)~kms+PetrolPrice+law, family="poisson", data=Seatbelts)
fit<-lm(log(DriversKilled)~kms+PetrolPrice+law,  data=Seatbelts)
summary(fit)
fit<-lm(I(log(DriversKilled))~kms+PetrolPrice+law,  data=Seatbelts)
summary(fit)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts, offset = drivers)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts, offset ="drivers")
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", offset = drivers,data=Seatbelts)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", offset = drivers,data=Seatbelts)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", offset = log(drivers),data=Seatbelts)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts)
fit<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", offset = log(drivers),data=Seatbelts)
fit0<-glm(DriversKilled~kms+PetrolPrice+law, family="poisson", data=Seatbelts)
summary(fit)
summary(fit0)
outcome
?shuttle
library(MASS)
data(shuttle)
View(shuttle)
fit<-glm(use~wind,family="binomial")
fit<-glm(use~wind,family="binomial",data=shuttle)
summary(fit)
exp(fit$coefficients)
fit1<-glm(use~wind+magn,family="binomial",data=shuttle)
summary(fit1)
exp(fit1$coefficients)
fit2<-glm(I(1-use)~wind,family="binomial",data=shuttle)
fit2<-glm((I(1-use))~wind,family="binomial",data=shuttle)
fit2<-glm((I(use))~wind,family="binomial",data=shuttle)
fit2<-glm((1-I(use))~wind,family="binomial",data=shuttle)
fit2<-glm(I(1-1*use)~wind,family="binomial",data=shuttle)
fit<-glm(use~wind,family="binomial",data=shuttle)
summary(fit)
exp(fit$coefficients)
class(shuttle$use)
str(shuttle$use)
levels(shuttle$use)
(shuttle$use)
levels(shuttle$use)
shuttle$auto<-1
data(shuttle)
levels(shuttle$use)
levels(shuttle$use[1])
levels(shuttle$use)[1]
levels(shuttle$use)[0]
levels(shuttle$use)[2]
shuttle$usenum[shuttle$use=='auto']<-1
shuttle$usenum[shuttle$use=='noauto']<-0
fit<-glm(use~wind,family="binomial",data=shuttle)
exp(fit$coefficients)
levels(shuttle$wind)
fit<-glm(use~wind-1,family="binomial",data=shuttle)
summary(fit)
exp(fit$coefficients)
0.2513/0.2831
exp(0.8876)
data(shuttle)
fit<-glm(use~wind-1,family="binomial",data=shuttle)
summary(fit)
data("InsectSprays")
View("InsertSprays")
View(InsertSprays)
data("InsectSprays")
View(InsertSprays)
View(InsertSprays)
View(InsectSprays)
fitP1<-glm(count~spray,family = Poisson)
fitP1<-glm(count~spray,family = "Poisson")
fitP1<-glm(count~spray,family = poisson)
fitP1<-glm(count~spray,family = poisson, data=spray)
fitP1<-glm(count~spray,family = poisson, data=InsectSprays)
sumamry(fitP1)
summary(fitP1)
exp(0.05588)
1/1.057
fitP1<-glm(count~spray-1,family = poisson, data=InsectSprays)
summary(fitP1)
exp(coef(fitP1))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
View(splineTerms)
View(splineTerms)
xMat <- cbind(1, x, splineTerms)
View(xMat)
View(xMat)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x,
n * B,
replace = TRUE),
B, n)
resampledMedians <- apply(resamples, 1, median)
View(resamples)
View(resamples)
dim(resamples)
View(father.son)
View(resampledMedians)
class(resampledMedians)
head(resampledMedians)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
View(subdata)
View(subdata)
sample(group)
sample(group)
swirl(0
swirl(
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
qnorm(0.95)
qnorm(.95)
z<-qnorm(.95)
pnorm(q = 30+z,mean = 30,sd = 1,lower.tail = FALSE)
pnorm(q = 30+z,mean = 32,sd = 1,lower.tail = FALSE)
pnorm(q = 30+z,mean = 32,sd = 1,lower.tail = FALSE)
pnorm(q = 30+z,mean = 32,sd = 2,lower.tail = FALSE)
pnorm(q = 30+z*2,mean = 32,sd = 2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power=0.8,delta = 2/4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8,delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8,delta =100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8, n=26,sd = 1,type = "one.sample", alt="one.sided")$delta
power.t.test(power=0.8, n=27,sd = 1,type = "one.sample", alt="one.sided")$delta
head(pValues)
sum(pValues<0.05)
sum(p.adjust(p = pValues,method = "bonferroni",n = 1000))
sum(p.adjust(p = pValues,method = "bonferroni",n = 1000)<0.05)
sum(p.adjust(p = pValues,method = "bonferroni")<0.05)
sum(p.adjust(p = pValues,method = "BH")<0.05)
tail(trueStatus)
table(pValues<0.05, trueStatus)
table(pValues2<0.05, trueStatus)
476/500
24/500
table((p.adjust(p = pValues2,method = "bonferroni")<0.05), trueStatus)
table(p.adjust(p = pValues2,method = "bonferroni")<0.05, trueStatus)
table(p.adjust(p = pValues2,method = "BH")<0.05, trueStatus)
1/6+2/6+3/6+4/6+5/6+1
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(x = fh,size = nh*B,replace = TRUE)
resam<-matrix(data = sam,nrow = B,ncol = nh)
meds<-apply(X = resam,1,median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(x = resampledMedians,c(0.025,0.0975))
quantile(resampledMedians,c(0.025,0.0975))
quantile(resampledMedians,c(0.025,0.975))
quantile(meds,c(0.025,0.975))
dim(InsertSprays)
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
View(BCCounts)
View(BCcounts)
BCcounts
group
testStat
obs<-testStat(BCcounts,group)
obs
mean(Bdata$count    -Cdata$count)
sample(group_
sample(group)
perms<-sapply(1:10000,function(i)testStat(BCcounts,sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000,
| function(i) testStat(DEcounts, sample(group)))
perms <- sapply(1 : 10000,function(i) testStat(DEcounts, sample(group)))
power.t.test(type = "one.sample",sd = 0.4,delta = 0.01sig.level = 0.9)
power.t.test(type = "one.sample",sd = 0.4,delta = 0.01,sig.level = 0.9)
power.t.test(power=0.9, type = "one.sample",sd = 0.4,delta = 0.01,sig.level = 0.05,alternative="one.sided")
power.t.test(n=100, type = "one.sample",sd = 0.04,delta = 0.01,sig.level = 0.05,alternative="one.sided")
power.t.test(power=0.9, type = "one.sample",sd = 0.04,delta = 0.01,sig.level = 0.05,alternative="one.sided")
pv<-((8)*1.5^2 + 8*1.8^2)/16
pv
semd<-pv*sqrt(1/9+1/9)
md<--3-1
md
md+ C(-1,1)*qt(0.975,16)*semd
md+ c(-1,1)*qt(0.975,16)*semd
md<-4
md+ c(-1,1)*qt(0.975,16)*semd
c(-1,1)*qt(0.975,16)*semd
pt(2.5,18,lower.tail=FALSE)
pt(2.5,18,lower.tail=TRUE)
pt(-1.257,18,lower.tail = FALSE)
pt(-6.743,18,lower.tail = TRUE)
md+ c(-1,1)*qt(0.975,16)*semd
md<-4
md+ c(-1,1)*qt(0.975,16)*semd
md<--4
md+ c(-1,1)*qt(0.975,16)*semd
t<-md+ c(-1,1)*qt(0.975,16)*semd
pt(t,16)
10/1787*100
ppois(0.5596,1,lower.tail = FALSE)
(10/1787)*100
ppois(0.5596,1,lower.tail = FALSE)
poisson.test(x=0.5596,r=1,alternative = "less")
poisson.test(x=10,T = 1787,r=1/100,alternative = "less")
pbinom(3,4,prob=0.5,lower.tail=FALSE)
binom.test(3, 4, alt="greater")$p.value
pbinom(1,4,prob=0.5,lower.tail=FALSE)
binom.test(3, 4, alt="greater")
poisson.test(x=10,T = 1787,r=1/100,alternative = "less")
ppois(0.5596,1,lower.tail = TRUE)
qnorm(p = 0.95,mean = 1100,sd = 30)
qnorm(p = 0.975,mean = 1100,sd = 30)
qnorm(p = 0.025,mean = 1100,sd = 30)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
dim(segmentationOriginal)
names(segmentationOriginal)
set.seed(125)
training<-segmentationOriginal[segmentationOriginal$Case==Test]
training<-segmentationOriginal[segmentationOriginal$Case=='Test']
train(Class~.,data=segmentationOriginal,method="rpart")
modfit <-train(Class~.,data=segmentationOriginal,method="rpart")
test <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
test <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modfit,test)
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive [,-1]
modfit <-train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit,newdata)
data(SAheart)
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
view(SAheart)
View(SAHeart)
View(SAheart)
dim(SAheart)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAHeart[train,]
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data = SAheart,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
modfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data = trainSA,method="glm",family="binomial")
predict(modfit,testSA)
testoutput<-predict(modfit,testSA)
missClass(testSA$chd,testouput)
missClass(testSA$chd,testoutput)
testoutput<-predict(modfit,testSA)
missClass(trainSA$chd,testoutput)
set.seed(13234)
modfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data = trainSA,method="glm",family="binomial")
missClass(testSA$chd, predict(modfit,testSA))
set.seed(1234)
modfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data = trainSA,method="glm",family="binomial")
missClass(testSA$chd, predict(modfit,testSA))
missClass(trainSA$chd, predict(modfit,trainSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
modfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data = trainSA,method="glm",family="binomial")
missClass(trainSA$chd, predict(modfit,trainSA))
missClass(testSA$chd, predict(modfit,testSA))
data(vowe.train)
data(vo)
data("vowel.test")
data("vowel.train")
View(vowel.test)
set.seed(33833)
varImp(
?varImp
train(y~.,data=vowel.train,method="rf")
train(y~.,data=vowel.train,method="rf")
modFit<-train(y~.,data=vowel.train,method="rf")
varImp(modFit)
varImp(modFit,useModel = "rf")
varImp(modFit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
train <- segmentationOriginal[segmentationOriginal$Case = "Train"]
train <- segmentationOriginal[segmentationOriginal$Case == "Train"]
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modfit1<-train(Case~.,data=segmentationOriginal,method="rpart")
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modfit1)
fancyRpartPlot(modfit1$finalModel)
plot(modfit1$finalModel)
qplot(modfit1$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
trainset<-segmentationOriginal[segmentationOriginal$Case == 'Train']
trainset<-segmentationOriginal[segmentationOriginal$Case == 'Train',]
testset<-segmentationOriginal[segmentationOriginal$Case == 'Test',]
View(segmentationOriginal)
modfit1<-train(Class~.,data=segmentationOriginal,method="rpart")
fancyRpartPlot(modfit1$finalModel)
library(rattle)
rattle
plot(modfit1$finalModel)
fancyRpartPlot(modfit1$finalModel)
install.packages(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modfit1$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
modfit5<-train(y~.,data=vowel.test,method="rf")
set.seed(33833)
varImp(modfit5)
varImp(modfit5,useModel = T)
modfit5<-train(y~.,data=vowel.train,method="rf")
predict(modfit5, vowel.test)
varImp(predict(modfit5, vowel.test))
result<-(predict(modfit5, vowel.test))
varImp(result)
varImp(modfit5)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
setwd("~/DataScience_WorkingFolder/8 - Practical Machine Learning")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
traindata<-read.csv("training.csv")
testdata<-read.csv("testing.csv")
View(testdata)
traindata<-read.csv("training.csv")
testdata<-read.csv("testing.csv")
View(testdata)
View(testdata)
View(testdata)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv", header=TRUE)
View(traindata)
library(caret)
names(testdata)
nsv<-nearZeroVar(training,saveMetrics = T)
nsv<-nearZeroVar(traindata,saveMetrics = T)
nsv
complete.cases(traindata)
str(traindata)
summary(traindata)
modfit<- train(classe~.,data=traindata, method="rpart")
library(rattle)
fancyRpartPlot(modfit$finalModel)
modfit
?confusionMatrix
testmod<-predict(modFit,testdata)
testmod<-predict(modfit,testdata)
warnings()
testmod<-predict(modfit,testdata)
modfit
testmod<-predict(modfit,testdata)
predict(modfit,testdata)
predict(modfit,testdata$classe)
predict(modfit,newdata=testdata)
predict(modfit,newdata=testdata$classe)
nearZeroVar(
nsv
nsv$nzv
traindataPr<-traindata[!nsv$nzv,]
head(traindataPr)
nsv(traindataPr)
nearZeroVar(traindataPr)
nsv
traindataPr<-traindata[,!nsv$nzv]
testdataPr<-testdata[,!nsv$nsv]
testdataPr<-testdata[,!nzv$nzv]
testdataPr<-testdata[,!nsv$nzv]
cvData <-createDataPartition(y=traindataPr, p=0.75, list=FALSE)
cvData <-createDataPartition(y=traindataPr, p=0.75, list=FALSE)
cvData <-createDataPartition(y=traindataPr$classe, p=0.75, list=FALSE)
cvDataInd <-createDataPartition(y=traindataPr$classe, p=0.75, list=FALSE)
cvData<- traindataPr[cvDataInd]
cvDataInd <-createDataPartition(y=traindataPr$classe, p=0.75, list=TRUE)
cvData<- traindataPr[cvDataInd]
```
cvDataInd <-createDataPartition(y=traindataPr$classe, p=0.75, list=FALSE)
View(cvDataInd)
cvData<- traindataPr[cvDataInd,]
cvData<- traindataPr[-cvDataInd,]
trainData<- traindataPr[cvDataInd,]
traindataPr<- traindataPr[cvDataInd,]
View(traindataPr)
cvData<- traindataPr[cvDataInd,]
summary(traindataPr)
modfit<- train(classe~.,data=traindata, method="rf")
